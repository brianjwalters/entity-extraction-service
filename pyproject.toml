[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "entity-extraction-service"
version = "2.0.0"
description = "Entity Extraction Service with multi-mode extraction, relationship detection, and vLLM integration"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "Proprietary"}
authors = [
    {name = "Luris Team"}
]
keywords = ["entity-extraction", "nlp", "legal-tech", "vllm", "spacy"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    # FastAPI and server dependencies
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",
    "pydantic==2.5.0",
    "pydantic-settings==2.1.0",

    # HTTP client for service communication
    "httpx==0.25.2",
    "aiohttp==3.9.1",

    # Circuit breaker and retry patterns
    "circuitbreaker==1.4.0",
    "backoff==2.2.1",

    # Data processing and NLP
    "numpy==1.24.3",
    "pandas==2.1.3",
    "spacy==3.7.2",
    "nltk==3.8.1",

    # Pattern matching and regex
    "regex==2023.10.3",

    # Async support
    "asyncio-mqtt==0.16.1",

    # Logging and monitoring
    "structlog==23.2.0",

    # Security
    "python-multipart==0.0.6",

    # JSON handling
    "orjson==3.9.10",

    # Date/time utilities
    "python-dateutil==2.8.2",

    # Environment management
    "python-dotenv==1.0.0",

    # YAML configuration support
    "PyYAML==6.0.1",

    # Template rendering for AI prompts
    "Jinja2==3.1.2",

    # vLLM for high-performance local LLM inference
    "vllm==0.6.3",

    # Token counting for accurate token estimation
    "tiktoken==0.7.0",

    # GPU monitoring for resource management
    "pynvml==11.5.0",

    # PostgreSQL database connectivity
    "psycopg2-binary==2.9.9",
    "asyncpg==0.29.0",

    # Supabase client for database operations
    "supabase==2.3.0",
    "postgrest==0.13.0",

    # Enhanced data validation
    "pydantic-extra-types==2.2.0",
]

[project.optional-dependencies]
dev = [
    # Development and testing
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.1.0",
    "pytest-timeout>=2.2.0",

    # Type checking
    "mypy>=1.7.1",
    "types-requests>=2.31.0.10",
    "types-PyYAML>=6.0.12",

    # Code formatting
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "autopep8>=2.0.4",
]

[project.urls]
Homepage = "https://github.com/luris/entity-extraction-service"
Documentation = "https://github.com/luris/entity-extraction-service/blob/main/README.md"
Repository = "https://github.com/luris/entity-extraction-service"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
namespaces = false

[tool.pytest.ini_options]
# Configure pytest to find modules from src/ directory
pythonpath = ["src"]
testpaths = ["tests"]

# Test discovery patterns
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Async support
asyncio_mode = "auto"

# Output and behavior
addopts = [
    "--import-mode=importlib",  # Use importlib for module imports (modern approach)
    "-ra",                       # Show summary of all test outcomes
    "--strict-markers",          # Enforce marker registration
    "--strict-config",           # Enforce config validation
    "--tb=short",               # Short traceback format
    "--color=yes",              # Colored output
    "-v",                       # Verbose output
]

# Test markers for categorization
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests requiring external services",
    "unit: marks tests as unit tests (isolated, fast)",
    "performance: marks tests as performance/benchmark tests",
    "vllm: marks tests requiring vLLM service availability",
    "spacy: marks tests requiring spaCy models",
    "gpu: marks tests requiring GPU availability",
]

# Coverage settings
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
precision = 2
show_missing = true

[tool.coverage.html]
directory = "htmlcov"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_calls = false
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
strict_optional = false

[[tool.mypy.overrides]]
module = [
    "spacy.*",
    "nltk.*",
    "vllm.*",
    "circuitbreaker.*",
]
ignore_missing_imports = true

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/venv/*", "*/.venv/*", "*/migrations/*"]

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
]
